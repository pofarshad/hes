# The proguard configuration file for the following section is /workspaces/hes/VpnResellerApp/feature_invoices/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-8.2.2
# This is a configuration file for ProGuard.
# http://proguard.sourceforge.net/index.html#manual/usage.html
#
# Starting with version 2.2 of the Android plugin for Gradle, this file is distributed together with
# the plugin and unpacked at build-time. The files in $ANDROID_HOME are no longer maintained and
# will be ignored by new version of the Android plugin for Gradle.

# Optimizations: If you don't want to optimize, use the proguard-android.txt configuration file
# instead of this one, which turns off the optimization flags.
# Adding optimization introduces certain risks, since for example not all optimizations performed by
# ProGuard works on all versions of Dalvik.  The following flags turn off various optimizations
# known to have issues, but the list may not be complete or up to date. (The "arithmetic"
# optimization can be used if you are only targeting Android 2.0 or later.)  Make sure you test
# thoroughly if you go this route.
-optimizations !code/simplification/arithmetic,!code/simplification/cast,!field/*,!class/merging/*
-optimizationpasses 5
-allowaccessmodification

-dontusemixedcaseclassnames
-dontskipnonpubliclibraryclasses
-verbose

# Preserve some attributes that may be required for reflection.
-keepattributes AnnotationDefault,
                EnclosingMethod,
                InnerClasses,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations,
                Signature

-keep public class com.google.vending.licensing.ILicensingService
-keep public class com.android.vending.licensing.ILicensingService
-keep public class com.google.android.vending.licensing.ILicensingService
-dontnote com.android.vending.licensing.ILicensingService
-dontnote com.google.vending.licensing.ILicensingService
-dontnote com.google.android.vending.licensing.ILicensingService

# For native methods, see http://proguard.sourceforge.net/manual/examples.html#native
-keepclasseswithmembernames,includedescriptorclasses class * {
    native <methods>;
}

# Keep setters in Views so that animations can still work.
-keepclassmembers public class * extends android.view.View {
    void set*(***);
    *** get*();
}

# We want to keep methods in Activity that could be used in the XML attribute onClick.
-keepclassmembers class * extends android.app.Activity {
    public void *(android.view.View);
}

# For enumeration classes, see http://proguard.sourceforge.net/manual/examples.html#enumerations
-keepclassmembers enum * {
    public static **[] values();
    public static ** valueOf(java.lang.String);
}

-keepclassmembers class * implements android.os.Parcelable {
    public static final ** CREATOR;
}

# Preserve annotated Javascript interface methods.
-keepclassmembers class * {
    @android.webkit.JavascriptInterface <methods>;
}

# The support libraries contains references to newer platform versions.
# Don't warn about those in case this app is linking against an older
# platform version. We know about them, and they are safe.
-dontnote android.support.**
-dontnote androidx.**
-dontwarn android.support.**
-dontwarn androidx.**

# This class is deprecated, but remains for backward compatibility.
-dontwarn android.util.FloatMath

# Understand the @Keep support annotation.
-keep class android.support.annotation.Keep
-keep class androidx.annotation.Keep

-keep @android.support.annotation.Keep class * {*;}
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @android.support.annotation.Keep <init>(...);
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

# These classes are duplicated between android.jar and org.apache.http.legacy.jar.
-dontnote org.apache.http.**
-dontnote android.net.http.**

# These classes are duplicated between android.jar and core-lambda-stubs.jar.
-dontnote java.lang.invoke.**

# End of content from /workspaces/hes/VpnResellerApp/feature_invoices/build/intermediates/default_proguard_files/global/proguard-android-optimize.txt-8.2.2
# The proguard configuration file for the following section is /workspaces/hes/VpnResellerApp/feature_invoices/proguard-rules.pro
# Add project specific ProGuard rules here for this library module.
-keep class androidx.lifecycle.ViewModel { *; }
-keepclassmembers class * extends androidx.lifecycle.ViewModel {
    <init>(...);
}
-keep public class * implements androidx.compose.runtime.ComposableFunction
-keep public @androidx.compose.runtime.Composable @interface * { *; }
-keepclassmembers public class * {
    @androidx.compose.runtime.Composable *;
}

# End of content from /workspaces/hes/VpnResellerApp/feature_invoices/proguard-rules.pro
# The proguard configuration file for the following section is /workspaces/hes/VpnResellerApp/feature_invoices/build/intermediates/aapt_proguard_file/release/aapt_rules.txt
# Generated by the gradle plugin

# End of content from /workspaces/hes/VpnResellerApp/feature_invoices/build/intermediates/aapt_proguard_file/release/aapt_rules.txt
# The proguard configuration file for the following section is /workspaces/hes/VpnResellerApp/core_ui/build/intermediates/consumer_proguard_dir/release/lib0/proguard.txt
# Add any ProGuard rules here that should be automatically applied to
# consumers of this library. Keep -keep class rules that are necessary
# for consumers of your library here.
#
# Examples:
#
# -keep class com.example.MyClass
# -keep class com.example.MyClass {
#   public <fields>;
#   public <methods>;
# }
# -keep interface com.example.MyInterface
# -keep interface com.example.MyInterface {
#   <methods>;
# }

# Keep all Composables if they are public
-keep public class * implements androidx.compose.runtime.ComposableFunction
-keep public @androidx.compose.runtime.Composable @interface * { *; }
-keepclassmembers public class * {
    @androidx.compose.runtime.Composable *;
}

# End of content from /workspaces/hes/VpnResellerApp/core_ui/build/intermediates/consumer_proguard_dir/release/lib0/proguard.txt
# The proguard configuration file for the following section is /workspaces/hes/VpnResellerApp/core_domain/build/intermediates/consumer_proguard_dir/release/lib0/proguard.txt
# Add any ProGuard rules here that should be automatically applied to
# consumers of this library.
# If your domain module defines public interfaces or data classes that
# consumers will use, you might need to keep them.
#
# Example:
# -keep interface com.yourcompany.vpnresellerapp.core_domain.repository.MyRepository { *; }
# -keep class com.yourcompany.vpnresellerapp.core_domain.model.MyDomainModel

# End of content from /workspaces/hes/VpnResellerApp/core_domain/build/intermediates/consumer_proguard_dir/release/lib0/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/dc64999e35750d3c2cab8743d4d7af4f/transformed/navigation-common-2.7.7/proguard.txt
# Copyright (C) 2019 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# NavArgsLazy creates NavArgs instances using reflection
-if public class ** implements androidx.navigation.NavArgs
-keepclassmembers public class <1> {
    ** fromBundle(android.os.Bundle);
}

# Retain the @Navigator.Name annotation on each subclass of Navigator.
# R8 full mode only retains annotations on items matched by a -keep rule,
# hence the extra -keep rule for the subclasses of Navigator.
#
# A -keep rule for the Navigator.Name annotation class is not required
# since the annotation is referenced from the code.
-keepattributes RuntimeVisibleAnnotations
-keep,allowobfuscation,allowshrinking class * extends androidx.navigation.Navigator

# End of content from /home/codespace/.gradle/caches/8.13/transforms/dc64999e35750d3c2cab8743d4d7af4f/transformed/navigation-common-2.7.7/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/de0d33800b40d901c77a84c088b0704c/transformed/jetified-savedstate-1.2.1/proguard.txt
# Copyright (C) 2019 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

-keepclassmembers,allowobfuscation class * implements androidx.savedstate.SavedStateRegistry$AutoRecreated {
    <init>();
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/de0d33800b40d901c77a84c088b0704c/transformed/jetified-savedstate-1.2.1/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/6cfc9f3fcd2b237d3cbda458e631762f/transformed/jetified-lifecycle-process-2.8.0/proguard.txt
# this rule is need to work properly when app is compiled with api 28, see b/142778206
-keepclassmembers class * extends androidx.lifecycle.EmptyActivityLifecycleCallbacks { *; }
# End of content from /home/codespace/.gradle/caches/8.13/transforms/6cfc9f3fcd2b237d3cbda458e631762f/transformed/jetified-lifecycle-process-2.8.0/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/f6de4644096c72f5c18181dd987052b5/transformed/jetified-lifecycle-runtime-release/proguard.txt
-keepattributes AnnotationDefault,
                RuntimeVisibleAnnotations,
                RuntimeVisibleParameterAnnotations,
                RuntimeVisibleTypeAnnotations

-keepclassmembers enum androidx.lifecycle.Lifecycle$Event {
    <fields>;
}

-keep class * implements androidx.lifecycle.GeneratedAdapter {
    <init>(...);
}

-keepclassmembers class ** {
    @androidx.lifecycle.OnLifecycleEvent *;
}

# this rule is need to work properly when app is compiled with api 28, see b/142778206
# Also this rule prevents registerIn from being inlined.
-keepclassmembers class androidx.lifecycle.ReportFragment$LifecycleCallbacks { *; }
# End of content from /home/codespace/.gradle/caches/8.13/transforms/f6de4644096c72f5c18181dd987052b5/transformed/jetified-lifecycle-runtime-release/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/d737e2236f807999b274f6b106ac6d83/transformed/jetified-lifecycle-viewmodel-release/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>();
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application);
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/d737e2236f807999b274f6b106ac6d83/transformed/jetified-lifecycle-viewmodel-release/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/374cd69f4b0700fb2e4c527f1a808a81/transformed/jetified-lifecycle-viewmodel-savedstate-2.8.0/proguard.txt
-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.ViewModel {
    <init>(androidx.lifecycle.SavedStateHandle);
}

-keepclassmembers,allowobfuscation class * extends androidx.lifecycle.AndroidViewModel {
    <init>(android.app.Application,androidx.lifecycle.SavedStateHandle);
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/374cd69f4b0700fb2e4c527f1a808a81/transformed/jetified-lifecycle-viewmodel-savedstate-2.8.0/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/e6ca0f52d8985b841ffccd2f2cbca01c/transformed/jetified-ui-release/proguard.txt
# Copyright (C) 2020 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We supply these as stubs and are able to link to them at runtime
# because they are hidden public classes in Android. We don't want
# R8 to complain about them not being there during optimization.
-dontwarn android.view.RenderNode
-dontwarn android.view.DisplayListCanvas

-keepclassmembers class androidx.compose.ui.platform.ViewLayerContainer {
    protected void dispatchGetDisplayList();
}

-keepclassmembers class androidx.compose.ui.platform.AndroidComposeView {
    android.view.View findViewByAccessibilityIdTraversal(int);
}

# Users can create Modifier.Node instances that implement multiple Modifier.Node interfaces,
# so we cannot tell whether two modifier.node instances are of the same type without using
# reflection to determine the class type. See b/265188224 for more context.
-keep,allowshrinking class * extends androidx.compose.ui.node.ModifierNodeElement

# End of content from /home/codespace/.gradle/caches/8.13/transforms/e6ca0f52d8985b841ffccd2f2cbca01c/transformed/jetified-ui-release/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/2fd5e9a5c6f055923e7c02013fff8728/transformed/core-1.13.1/proguard.txt
# Never inline methods, but allow shrinking and obfuscation.
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.ViewCompat$Api* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.view.WindowInsetsCompat$*Impl* {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.app.NotificationCompat$*$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.os.UserHandleCompat$Api*Impl {
  <methods>;
}
-keepclassmembernames,allowobfuscation,allowshrinking class androidx.core.widget.EdgeEffectCompat$Api*Impl {
  <methods>;
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/2fd5e9a5c6f055923e7c02013fff8728/transformed/core-1.13.1/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/63eea69683be1464c2e4775f2cb7ee93/transformed/jetified-runtime-release/proguard.txt
-assumenosideeffects public class androidx.compose.runtime.ComposerKt {
    void sourceInformation(androidx.compose.runtime.Composer,java.lang.String);
    void sourceInformationMarkerStart(androidx.compose.runtime.Composer,int,java.lang.String);
    void sourceInformationMarkerEnd(androidx.compose.runtime.Composer);
}

# Composer's class initializer doesn't do anything but create an EMPTY object. Marking the
# initializers as having no side effects can help encourage shrinkers to merge/devirtualize Composer
# with ComposerImpl.
-assumenosideeffects public class androidx.compose.runtime.Composer {
    void <clinit>();
}
-assumenosideeffects public class androidx.compose.runtime.ComposerImpl {
    void <clinit>();
}
# End of content from /home/codespace/.gradle/caches/8.13/transforms/63eea69683be1464c2e4775f2cb7ee93/transformed/jetified-runtime-release/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/90b7c12db96cb6b9727e7c6f554232e9/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# When editing this file, update the following files as well:
# - META-INF/proguard/coroutines.pro
# - META-INF/com.android.tools/proguard/coroutines.pro

# Most of volatile fields are updated with AFU and should not be mangled
-keepclassmembers class kotlinx.coroutines.** {
    volatile <fields>;
}

# Same story for the standard library's SafeContinuation that also uses AtomicReferenceFieldUpdater
-keepclassmembers class kotlin.coroutines.SafeContinuation {
    volatile <fields>;
}

# These classes are only required by kotlinx.coroutines.debug.AgentPremain, which is only loaded when
# kotlinx-coroutines-core is used as a Java agent, so these are not needed in contexts where ProGuard is used.
-dontwarn java.lang.instrument.ClassFileTransformer
-dontwarn sun.misc.SignalHandler
-dontwarn java.lang.instrument.Instrumentation
-dontwarn sun.misc.Signal

# Only used in `kotlinx.coroutines.internal.ExceptionsConstructor`.
# The case when it is not available is hidden in a `try`-`catch`, as well as a check for Android.
-dontwarn java.lang.ClassValue

# An annotation used for build tooling, won't be directly accessed.
-dontwarn org.codehaus.mojo.animal_sniffer.IgnoreJRERequirement
# End of content from /home/codespace/.gradle/caches/8.13/transforms/90b7c12db96cb6b9727e7c6f554232e9/transformed/rules/lib/META-INF/com.android.tools/r8/coroutines.pro
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/e5117e2fdff55da260cb169e8b6bc925/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# Allow R8 to optimize away the FastServiceLoader.
# Together with ServiceLoader optimization in R8
# this results in direct instantiation when loading Dispatchers.Main
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatcherLoader {
    boolean FAST_SERVICE_LOADER_ENABLED return false;
}

-assumenosideeffects class kotlinx.coroutines.internal.FastServiceLoaderKt {
    boolean ANDROID_DETECTED return true;
}

# Disable support for "Missing Main Dispatcher", since we always have Android main dispatcher
-assumenosideeffects class kotlinx.coroutines.internal.MainDispatchersKt {
    boolean SUPPORT_MISSING return false;
}

# Statically turn off all debugging facilities and assertions
-assumenosideeffects class kotlinx.coroutines.DebugKt {
    boolean getASSERTIONS_ENABLED() return false;
    boolean getDEBUG() return false;
    boolean getRECOVER_STACK_TRACES() return false;
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/e5117e2fdff55da260cb169e8b6bc925/transformed/rules/lib/META-INF/com.android.tools/r8-from-1.6.0/coroutines.pro
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/f4126bdb17b0a4cb6459f0fab232b091/transformed/versionedparcelable-1.1.1/proguard.txt
-keep class * implements androidx.versionedparcelable.VersionedParcelable
-keep public class android.support.**Parcelizer { *; }
-keep public class androidx.**Parcelizer { *; }
-keep public class androidx.versionedparcelable.ParcelImpl

# End of content from /home/codespace/.gradle/caches/8.13/transforms/f4126bdb17b0a4cb6459f0fab232b091/transformed/versionedparcelable-1.1.1/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/4a1f913cc9d3739e66868b45335cd264/transformed/jetified-startup-runtime-1.1.1/proguard.txt
# It's important that we preserve initializer names, given they are used in the AndroidManifest.xml.
-keepnames class * extends androidx.startup.Initializer

# These Proguard rules ensures that ComponentInitializers are are neither shrunk nor obfuscated,
# and are a part of the primary dex file. This is because they are discovered and instantiated
# during application startup.
-keep class * extends androidx.startup.Initializer {
    # Keep the public no-argument constructor while allowing other methods to be optimized.
    <init>();
}

-assumenosideeffects class androidx.startup.StartupLogger { public static <methods>; }

# End of content from /home/codespace/.gradle/caches/8.13/transforms/4a1f913cc9d3739e66868b45335cd264/transformed/jetified-startup-runtime-1.1.1/proguard.txt
# The proguard configuration file for the following section is /home/codespace/.gradle/caches/8.13/transforms/a5f12367def7aef30103d98d0581ee53/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
-keep,allowobfuscation @interface androidx.annotation.Keep
-keep @androidx.annotation.Keep class * {*;}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <methods>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <fields>;
}

-keepclasseswithmembers class * {
    @androidx.annotation.Keep <init>(...);
}

-keepclassmembers,allowobfuscation class * {
  @androidx.annotation.DoNotInline <methods>;
}

# End of content from /home/codespace/.gradle/caches/8.13/transforms/a5f12367def7aef30103d98d0581ee53/transformed/rules/lib/META-INF/proguard/androidx-annotations.pro
# The proguard configuration file for the following section is <unknown>
-keep class **.R
-keep class **.R$* {*;}
# End of content from <unknown>